{"version":3,"sources":["Board.js","Cell.js","Announcement.js","Title.js","Icon.js","App.js","serviceWorker.js","index.js","github.svg"],"names":["Board","_this","this","Object","classCallCheck","movePlayer","x","y","player","cb","board","getCell","getOpenCells","reduce","freeCells","row","rowIdx","colIdx","length","push","findWinner","columns","col","diags","left","right","i","allTheSame","every","cell","checkMatrix","matrix","j","Cell","handleClick","setState","disabled","coords","split","map","num","parseInt","props","render","_this$props","children","react_default","a","createElement","className","concat","onClick","Component","Announcement","winner","boardIsFilled","reset","message","Title","Icon","href","src","GH_ICON","alt","App","possibleConstructorReturn","getPrototypeOf","call","nextPlayer","state","_cell","slicedToArray","gameOver","playerMove","checkWinner","setTimeout","aiMove","openCells","_openCells$Math$floor","Math","floor","random","forceUpdate","addClassName","renderMove","renderGrid","src_Cell","key","renderAnnouncement","announcement","Announcement_Announcement","src_Icon","src_Title","Boolean","window","location","hostname","match","document","title","ReactDOM","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4c10cd77.chunk.js","sourcesContent":["class Board {\r\n  constructor() {\r\n    this.board = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(0);\r\n      }\r\n      this.board.push(row);\r\n    }\r\n  }\r\n\r\n  // move playing player/ai\r\n  movePlayer = (x, y, player, cb) => {\r\n    this.board[x][y] = player;\r\n    typeof cb === 'function' && cb();\r\n  };\r\n\r\n  // determine which cell belongs to player\r\n  getCell = (x, y) => {\r\n    return this.board[x][y];\r\n  };\r\n\r\n  // array of available playable cells\r\n  getOpenCells = () => {\r\n    return this.board.reduce((freeCells, row, rowIdx) => {\r\n      for (let colIdx = 0; colIdx < row.length; colIdx++) {\r\n        if (this.board[rowIdx][colIdx] === 0) {\r\n          freeCells.push([rowIdx, colIdx]);\r\n        }\r\n      }\r\n      return freeCells;\r\n    }, []);\r\n  };\r\n\r\n  findWinner = () => {\r\n    const { board } = this;\r\n\r\n    // find column matches\r\n    const columns = [];\r\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\r\n      const col = [];\r\n      for (let colIdx = 0; colIdx < board[rowIdx].length; colIdx++) {\r\n        col.push(board[colIdx][rowIdx]);\r\n      }\r\n      columns.push(col);\r\n    }\r\n\r\n    // find diagonal matches\r\n    const diags = { left: [], right: [] };\r\n    for (let i = 0; i < board.length; i++) {\r\n      diags.left.push(board[i][i]);\r\n      diags.right.push(board[board.length - i - 1][i]);\r\n    }\r\n\r\n    // check if all items in a single row are the same\r\n    const allTheSame = row => {\r\n      return row.every(cell => cell === row[0]);\r\n    };\r\n\r\n    // get winner after row, column, and diagonal matches are aggregated into arrays\r\n    const checkMatrix = matrix => {\r\n      for (let x = 0; x < matrix.length; x++) {\r\n        if (allTheSame(matrix[x]) && matrix[x][0]) {\r\n          return matrix[x][0];\r\n        }\r\n      }\r\n    };\r\n\r\n    // check rows, columns, and diagonals and return player 1, player 2, or nothing\r\n    return checkMatrix(board)\r\n      ? checkMatrix(board)\r\n      : checkMatrix(columns)\r\n      ? checkMatrix(columns)\r\n      : checkMatrix([diags.left, diags.right]);\r\n  };\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\nclass Cell extends Component {\r\n  // disable clicking on cell after player has moved\r\n  handleClick = cell => {\r\n    this.setState({ disabled: true }, () => {\r\n      const coords = cell.split('-').map(num => parseInt(num));\r\n      this.props.handleClick(coords);\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    const { cell, disabled, children } = this.props;\r\n    return (\r\n      <button\r\n        className={`cell cell-${cell} ${this.props.disabled ? 'disabled' : ''}`}\r\n        onClick={() => this.handleClick(cell)}\r\n        disabled={disabled}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\n\r\nexport default class Announcement extends Component {\r\n  render = () => {\r\n    const { winner, boardIsFilled, reset } = this.props;\r\n    const message = !winner && boardIsFilled() ? `It's a tie` : `Player ${winner} has won!`;\r\n\r\n    return (\r\n      <div className=\"backdrop\">\r\n        <div className=\"modal-container\">\r\n          <div className=\"message-container\">\r\n            {message}\r\n            <button onClick={reset}>reset</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nconst Title = () => (\r\n  <div className=\"title-container\">\r\n    <h2>Tic Tac Toe!</h2>\r\n  </div>\r\n);\r\n\r\nexport default Title;","import React from 'react';\r\nimport GH_ICON from './github.svg';\r\n\r\nconst Icon = () => (\r\n  <div className=\"icon-container\">\r\n    <a href=\"https://github.com/ryasan86/tic_tac_toe\">\r\n      <img src={GH_ICON} alt=\"github\" className=\"icon\" />\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default Icon;\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport Cell from './Cell';\r\nimport Announcement from './Announcement';\r\nimport Title from './Title';\r\nimport Icon from './Icon';\r\nimport './App.scss';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: 1,\r\n      gameOver: false,\r\n      winner: 0\r\n    };\r\n    this.board = new Board();\r\n  }\r\n\r\n  // switch players\r\n  nextPlayer = () => {\r\n    return this.state.player === 1 ? 2 : 1;\r\n  };\r\n\r\n  // set coordinates on board to player making move\r\n  handleClick = cell => {\r\n    const [x, y] = cell;\r\n    !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, this.playerMove);\r\n  };\r\n\r\n  // player move then ai move\r\n  playerMove = () => {\r\n    this.checkWinner();\r\n    this.setState({ player: this.nextPlayer() }, () => {\r\n      setTimeout(this.aiMove, 200); // realistic time between player and ai move\r\n    });\r\n  };\r\n\r\n  // ai move to random playable cell\r\n  aiMove = () => {\r\n    const openCells = this.board.getOpenCells();\r\n    if (openCells.length) {\r\n      const [x, y] = openCells[Math.floor(Math.random() * openCells.length)];\r\n      !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, () => {\r\n          this.forceUpdate();\r\n          this.checkWinner();\r\n          this.setState({ player: this.nextPlayer() });\r\n        });\r\n    }\r\n  };\r\n\r\n  // check if any playable cells are left on board\r\n  boardIsFilled = () => {\r\n    return !this.board.getOpenCells()[0];\r\n  };\r\n\r\n  // check winner\r\n  checkWinner = () => {\r\n    const { findWinner } = this.board;\r\n    if (findWinner() > 0 || this.boardIsFilled()) {\r\n      this.setState({ gameOver: true, winner: findWinner() });\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.board = new Board();\r\n    this.setState({ player: 1, gameOver: false, winner: 0 });\r\n  };\r\n\r\n  // renders x or o\r\n  addClassName = (x, y) => {\r\n    const { getCell } = this.board;\r\n    return getCell(x, y) === 1 ? 'player1' : getCell(x, y) === 2 ? 'player2' : '';\r\n  };\r\n\r\n  // show x or o based on who's turn it is\r\n  renderMove = (x, y) => {\r\n    return <div className={this.addClassName(x, y)} />;\r\n  };\r\n\r\n  // show cells based on board layout\r\n  renderGrid = () => {\r\n    return this.board.board.map((row, x) => {\r\n      return row.map((cell, y) => {\r\n        const coords = `${x}-${y}`;\r\n        const disabled = cell > 0; // disable clicking if move exists on cell\r\n        return (\r\n          <Cell\r\n            key={coords}\r\n            cell={coords}\r\n            handleClick={this.handleClick}\r\n            disabled={disabled}\r\n          >\r\n            {this.renderMove(x, y)}\r\n          </Cell>\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // show announcement when game ends\r\n  renderAnnouncement = () => {\r\n    const announcement = (\r\n      <Announcement\r\n        winner={this.state.winner}\r\n        boardIsFilled={this.boardIsFilled}\r\n        reset={this.reset}\r\n      />\r\n    );\r\n    return this.state.gameOver ? announcement : '';\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"app\">\r\n        <Icon />\r\n        {this.renderAnnouncement()}\r\n        <Title />><div className=\"grid\">{this.renderGrid()}</div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\ndocument.title = 'React - Tic Tac Toe';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/github.f5a069d2.svg\";"],"sourceRoot":""}