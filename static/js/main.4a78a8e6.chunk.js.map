{"version":3,"sources":["Cell.js","Board.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["parseIntCoords","cell","split","map","num","parseInt","Cell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","disabled","coords","props","renderMove","_parseIntCoords","_parseIntCoords2","slicedToArray","x","y","getCell","board","react_default","a","createElement","className","render","concat","state","onClick","Component","Board","movePlayer","player","cb","console","log","getOpenCells","reduce","freeCells","row","rowIdx","colIdx","length","push","i","j","Grid","nextPlayer","playerMove","_cell","renderCells","_","Cell_Cell","key","gameOver","winner","Title","App","App_Title","Grid_Grid","document","title","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a78a8e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst parseIntCoords = cell => {\r\n  return cell.split('-').map(num => parseInt(num));\r\n};\r\n\r\nexport default class Cell extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      disabled: false\r\n    };\r\n  }\r\n\r\n  // disable clicking on cell after player has moved\r\n  handleClick = cell => {\r\n    this.setState({ disabled: true }, () => {\r\n      const coords = parseIntCoords(cell);\r\n      this.props.handleClick(coords);\r\n    });\r\n  };\r\n\r\n  // render x or o based on who's turn it is\r\n  renderMove = () => {\r\n    const [x, y] = parseIntCoords(this.props.cell);\r\n    const { getCell } = this.props.board;\r\n    return <div className={getCell(x, y) === 1 ? 'player1' : getCell(x, y) === 2 ? 'player2' : ''} />;\r\n  };\r\n\r\n  render = () => {\r\n    const { cell } = this.props;\r\n    return (\r\n      <button\r\n        className={`cell cell-${cell} ${this.state.disabled ? 'disabled' : ''}`}\r\n        onClick={() =>  this.handleClick(cell)}\r\n        disabled={this.state.disabled}\r\n      >\r\n        {this.renderMove()}\r\n      </button>\r\n    );\r\n  };\r\n}\r\n","export default class Board {\r\n  constructor() {\r\n    this.board = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(0);\r\n      }\r\n      this.board.push(row);\r\n    }\r\n  }\r\n\r\n  // move playing user/ai\r\n  movePlayer = (x, y, player, cb) => {\r\n    this.board[x][y] = player;\r\n    console.log(this.board);\r\n    typeof cb === 'function' && cb();\r\n  };\r\n\r\n  // determine which cell belongs to player\r\n  getCell = (x, y) => {\r\n    return this.board[x][y];\r\n  };\r\n\r\n  // array of available playable cells\r\n  getOpenCells = () => {\r\n    return this.board.reduce((freeCells, row, rowIdx) => {\r\n      for (let colIdx = 0; colIdx < row.length; colIdx++) {\r\n        if (this.board[rowIdx][colIdx] === 0) {\r\n          freeCells.push([rowIdx, colIdx]);\r\n        }\r\n      }\r\n      return freeCells;\r\n    }, []);\r\n  };\r\n\r\n  // // TODO: check rows, columns, diagonals\r\n  // checkWin = () => {\r\n  //   console.log('TODO: check win');\r\n  // };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport Board from './Board';\r\n\r\nexport default class Grid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player: 1,\r\n      gameOver: false,\r\n      winner: false\r\n    };\r\n\r\n    this.board = new Board();\r\n  }\r\n\r\n  // next player\r\n  nextPlayer = () => {\r\n    return this.state.player === 1 ? 2 : 1;\r\n  };\r\n\r\n  // player move\r\n  playerMove = () => {\r\n    this.setState({ player: this.nextPlayer() });\r\n  };\r\n\r\n  // set coordinates on board to player making move\r\n  handleClick = cell => {\r\n    const [x, y] = cell;\r\n    this.board.movePlayer(x, y, this.state.player);\r\n    this.playerMove();\r\n  };\r\n\r\n  // render cells based on board layout\r\n  renderCells = () => {\r\n    const { board } = this.board;\r\n    return board.map((row, x) => {\r\n      return row.map((_, y) => {\r\n        const coords = `${x}-${y}`;\r\n        return (\r\n          <Cell\r\n            key={coords}\r\n            cell={coords}\r\n            player={this.state.player}\r\n            handleClick={this.handleClick}\r\n            board={this.board}\r\n          />\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return <div className=\"grid\">{this.renderCells()}</div>;\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Grid from './Grid';\r\nimport './App.scss';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title-container\">\r\n      <h2>Tic Tac Toe!</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    document.title = 'Tic Tac Toe!';\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"app\">\r\n        <Title />\r\n        <Grid />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}