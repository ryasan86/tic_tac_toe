{"version":3,"sources":["Cell.js","Board.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["parseIntCoords","cell","split","map","num","parseInt","Cell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","disabled","coords","props","render","react_default","a","createElement","className","concat","state","onClick","children","Component","Board","movePlayer","x","y","player","cb","board","getCell","getOpenCells","reduce","freeCells","row","rowIdx","colIdx","length","push","i","j","Grid","nextPlayer","playerMove","aiMove","openCells","_openCells$Math$floor","slicedToArray","Math","floor","random","forceUpdate","bind","assertThisInitialized","_cell","renderMove","renderCells","_","Cell_Cell","key","gameOver","winner","Title","App","App_Title","Grid_Grid","document","title","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0548abc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst parseIntCoords = cell => {\r\n  return cell.split('-').map(num => parseInt(num));\r\n};\r\n\r\nexport default class Cell extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      disabled: false\r\n    };\r\n  }\r\n\r\n  // disable clicking on cell after player has moved\r\n  handleClick = cell => {\r\n    this.setState({ disabled: true }, () => {\r\n      const coords = parseIntCoords(cell);\r\n      this.props.handleClick(coords);\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    const { cell } = this.props;\r\n    return (\r\n      <button\r\n        className={`cell cell-${cell} ${this.state.disabled ? 'disabled' : ''}`}\r\n        onClick={() =>  this.handleClick(cell)}\r\n        disabled={this.state.disabled}\r\n      >\r\n        {this.props.children}\r\n      </button>\r\n    );\r\n  };\r\n}\r\n","export default class Board {\r\n  constructor() {\r\n    this.board = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(0);\r\n      }\r\n      this.board.push(row);\r\n    }\r\n  }\r\n\r\n  // move playing player/ai\r\n  movePlayer = (x, y, player, cb) => {\r\n    this.board[x][y] = player;\r\n    typeof cb === 'function' && cb();\r\n  };\r\n\r\n  // determine which cell belongs to player\r\n  getCell = (x, y) => {\r\n    return this.board[x][y];\r\n  };\r\n\r\n  // array of available playable cells\r\n  getOpenCells = () => {\r\n    return this.board.reduce((freeCells, row, rowIdx) => {\r\n      for (let colIdx = 0; colIdx < row.length; colIdx++) {\r\n        if (this.board[rowIdx][colIdx] === 0) {\r\n          freeCells.push([rowIdx, colIdx]);\r\n        }\r\n      }\r\n      return freeCells;\r\n    }, []);\r\n  };\r\n\r\n  // // TODO: check rows, columns, diagonals\r\n  // checkWin = () => {\r\n  //   console.log('TODO: check win');\r\n  // };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport Board from './Board';\r\n\r\nexport default class Grid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player: 1,\r\n      gameOver: false,\r\n      winner: false\r\n    };\r\n\r\n    this.board = new Board();\r\n  }\r\n  \r\n  // switch players\r\n  nextPlayer = () => {\r\n    return this.state.player === 1 ? 2 : 1;\r\n  };\r\n\r\n  // player move\r\n  playerMove = () => {\r\n    this.setState({ player: this.nextPlayer() }, this.aiMove);\r\n  };\r\n\r\n  // ai move after player makes a move\r\n  aiMove = () => {\r\n    const openCells = this.board.getOpenCells();\r\n    // make sure there are open cells before placing a move\r\n    if (openCells[0]) {\r\n      const [x, y] = openCells[Math.floor(Math.random() * openCells.length)];\r\n      this.board.movePlayer(x, y, this.state.player, this.forceUpdate.bind(this)); // board rerender after ai move\r\n\r\n    }\r\n  }\r\n\r\n  // set coordinates on board to player making move\r\n  handleClick = cell => {\r\n    const [x, y] = cell;\r\n    this.board.movePlayer(x, y, this.state.player, this.playerMove);\r\n  };\r\n\r\n    // render x or o based on who's turn it is\r\n    renderMove = (x, y) => {\r\n      const { getCell } = this.board;\r\n      return <div className={getCell(x, y) === 1 ? 'player1' : getCell(x, y) === 2 ? 'player2' : ''} />;\r\n    };\r\n\r\n  // render cells based on board layout\r\n  renderCells = () => {\r\n    const { board } = this.board;\r\n    return board.map((row, x) => {\r\n      return row.map((_, y) => {\r\n        const coords = `${x}-${y}`;\r\n        return (\r\n          <Cell\r\n            key={coords}\r\n            cell={coords}\r\n            handleClick={this.handleClick}\r\n          >{this.renderMove(x, y)}</Cell>\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return <div className=\"grid\">{this.renderCells()}</div>;\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Grid from './Grid';\r\nimport './App.scss';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title-container\">\r\n      <h2>Tic Tac Toe!</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    document.title = 'Tic Tac Toe!';\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"app\">\r\n        <Title />\r\n        <Grid />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}