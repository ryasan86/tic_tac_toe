{"version":3,"sources":["Board.js","Cell.js","Announcement.js","Title.js","AppBar.js","App.js","index.js","images/github.svg"],"names":["Board","_this","this","Object","classCallCheck","movePlayer","x","y","player","cb","board","getCell","getOpenCells","reduce","freeCells","row","rowIdx","colIdx","length","push","findWinner","columns","col","diags","left","right","i","allTheSame","every","cell","checkMatrix","matrix","j","Cell","state","hovered","handleClick","_this$props","props","disabled","setState","coords","split","map","num","parseInt","addClassNames","_this$props2","concat","handleMouseEnter","handleMouseLeave","render","_this$props3","children","react_default","a","createElement","onMouseEnter","onMouseLeave","className","onClick","Component","Announcement","winner","boardIsFilled","reset","message","Title","AppBar","href","src","GH_ICON","alt","App","possibleConstructorReturn","getPrototypeOf","call","nextPlayer","_cell","slicedToArray","gameOver","playerMove","checkWinner","setTimeout","aiMove","openCells","_openCells$Math$floor","Math","floor","random","addClassName","renderMove","renderGrid","src_Cell","key","renderAnnouncement","announcement","Announcement_Announcement","react","src_AppBar","src_Title","document","title","ReactDOM","App_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3546cad9.chunk.js","sourcesContent":["class Board {\r\n  constructor() {\r\n    this.board = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(0);\r\n      }\r\n      this.board.push(row);\r\n    }\r\n  }\r\n\r\n  // move playing player/ai\r\n  movePlayer = (x, y, player, cb) => {\r\n    this.board[x][y] = player;\r\n    typeof cb === 'function' && cb();\r\n  };\r\n\r\n  // determine which cell belongs to player\r\n  getCell = (x, y) => {\r\n    return this.board[x][y];\r\n  };\r\n\r\n  // array of available playable cells\r\n  getOpenCells = () => {\r\n    return this.board.reduce((freeCells, row, rowIdx) => {\r\n      for (let colIdx = 0; colIdx < row.length; colIdx++) {\r\n        if (this.board[rowIdx][colIdx] === 0) {\r\n          freeCells.push([rowIdx, colIdx]);\r\n        }\r\n      }\r\n      return freeCells;\r\n    }, []);\r\n  };\r\n\r\n  findWinner = () => {\r\n    const { board } = this;\r\n\r\n    // find column matches\r\n    const columns = [];\r\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\r\n      const col = [];\r\n      for (let colIdx = 0; colIdx < board[rowIdx].length; colIdx++) {\r\n        col.push(board[colIdx][rowIdx]);\r\n      }\r\n      columns.push(col);\r\n    }\r\n\r\n    // find diagonal matches\r\n    const diags = { left: [], right: [] };\r\n    for (let i = 0; i < board.length; i++) {\r\n      diags.left.push(board[i][i]);\r\n      diags.right.push(board[board.length - i - 1][i]);\r\n    }\r\n\r\n    // check if all items in a single row are the same\r\n    const allTheSame = row => {\r\n      return row.every(cell => cell === row[0]);\r\n    };\r\n\r\n    // get winner after row, column, and diagonal matches are aggregated into arrays\r\n    const checkMatrix = matrix => {\r\n      for (let x = 0; x < matrix.length; x++) {\r\n        if (allTheSame(matrix[x]) && matrix[x][0]) {\r\n          return matrix[x][0];\r\n        }\r\n      }\r\n    };\r\n\r\n    // check rows, columns, and diagonals and return player 1, player 2, or nothing\r\n    return checkMatrix(board)\r\n      ? checkMatrix(board)\r\n      : checkMatrix(columns)\r\n      ? checkMatrix(columns)\r\n      : checkMatrix([diags.left, diags.right]);\r\n  };\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\nclass Cell extends Component {\r\n  state = {\r\n    hovered: false\r\n  };\r\n\r\n  // disable clicking on cell after player has moved\r\n  handleClick = cell => {\r\n    const { disabled, movePlayer } = this.props;\r\n    this.setState({ disabled: true }, () => {\r\n      const coords = cell.split('-').map(num => parseInt(num));\r\n      !disabled && movePlayer(coords);\r\n    });\r\n  };\r\n\r\n  addClassNames = () => {\r\n    const { cell, disabled } = this.props;\r\n    return `cell cell-${cell} ${disabled ? 'disabled' : ''}`;\r\n  };\r\n\r\n  handleMouseEnter = () => {\r\n    this.setState({ hovered: true })\r\n  };\r\n\r\n  handleMouseLeave = () => {\r\n    this.setState({ hovered: false })\r\n  };\r\n\r\n  render = () => {\r\n    const { cell, children, player, disabled } = this.props;\r\n    return (\r\n      <button\r\n        onMouseEnter={this.handleMouseEnter}\r\n        onMouseLeave={this.handleMouseLeave}\r\n        className={this.addClassNames()}\r\n        onClick={() => this.handleClick(cell)}>\r\n        {this.state.hovered ? <div className={`hoverP${!disabled && player}`} />  : ''}\r\n        {children}\r\n      </button>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Announcement extends Component {\r\n  render = () => {\r\n    const { winner, boardIsFilled, reset } = this.props;\r\n    const message = !winner && boardIsFilled() ? `It's a tie` : `Player ${winner} has won!`;\r\n\r\n    return (\r\n      <div className=\"backdrop\">\r\n        <div className=\"modal-container\">\r\n          <div className=\"message-container\">\r\n            {message}\r\n            <button onClick={reset}>reset</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nconst Title = () => (\r\n  <div className=\"title-container\">\r\n    <h2>Tic Tac Toe!</h2>\r\n  </div>\r\n);\r\n\r\nexport default Title;","import React from 'react';\r\nimport GH_ICON from './images/github.svg';\r\n\r\nconst AppBar = () => (\r\n  <div className=\"app-bar\">\r\n    <a href=\"https://github.com/ryasan86/tic_tac_toe\">\r\n      <img src={GH_ICON} alt=\"github\" className=\"icon\" />\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default AppBar;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Board from './Board';\r\nimport Cell from './Cell';\r\nimport Announcement from './Announcement';\r\nimport Title from './Title';\r\nimport AppBar from './AppBar';\r\nimport './App.scss';\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player: 1,\r\n      gameOver: false,\r\n      winner: 0\r\n    };\r\n    this.board = new Board();\r\n  }\r\n\r\n  // switch players\r\n  nextPlayer = () => {\r\n    return this.state.player === 1 ? 2 : 1;\r\n  };\r\n\r\n  // set coordinates on board to player making move\r\n  movePlayer = cell => {\r\n    const [x, y] = cell;\r\n    !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, this.playerMove);\r\n  };\r\n\r\n  // player move then ai move\r\n  playerMove = () => {\r\n    this.checkWinner();\r\n    this.setState({ player: this.nextPlayer() }, () => {\r\n      setTimeout(this.aiMove, 200); // realistic time between player and ai move\r\n    });\r\n  };\r\n\r\n  // ai move to random playable cell\r\n  aiMove = () => {\r\n    const openCells = this.board.getOpenCells();\r\n    if (openCells.length) {\r\n      const [x, y] = openCells[Math.floor(Math.random() * openCells.length)];\r\n      !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, () => {\r\n          this.checkWinner();\r\n          this.setState({ player: this.nextPlayer() });\r\n        });\r\n    }\r\n  };\r\n\r\n  // check if any playable cells are left on board\r\n  boardIsFilled = () => {\r\n    return !this.board.getOpenCells()[0];\r\n  };\r\n\r\n  // check winner\r\n  checkWinner = () => {\r\n    const { findWinner } = this.board;\r\n    if (findWinner() > 0 || this.boardIsFilled()) {\r\n      this.setState({ gameOver: true, winner: findWinner() });\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.board = new Board();\r\n    this.setState({ player: 1, gameOver: false, winner: 0 });\r\n  };\r\n\r\n  // renders x or o\r\n  addClassName = (x, y) => {\r\n    const { getCell } = this.board;\r\n    return getCell(x, y) === 1 ? 'player1' : getCell(x, y) === 2 ? 'player2' : '';\r\n  };\r\n\r\n  // show x or o based on who's turn it is\r\n  renderMove = (x, y) => {\r\n    return <div className={this.addClassName(x, y)} />;\r\n  };\r\n\r\n  // show cells based on board layout\r\n  renderGrid = () => {\r\n    return this.board.board.map((row, x) => {\r\n      return row.map((cell, y) => {\r\n        const coords = `${x}-${y}`;\r\n        const disabled = cell > 0; // disable clicking if move exists on cell\r\n        return (\r\n          <Cell\r\n            key={coords}\r\n            cell={coords}\r\n            disabled={disabled}\r\n            movePlayer={this.movePlayer}\r\n            player={this.state.player}>\r\n            {this.renderMove(x, y)}\r\n          </Cell>\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // show announcement when game ends\r\n  renderAnnouncement = () => {\r\n    const announcement = (\r\n      <Announcement\r\n        winner={this.state.winner}\r\n        boardIsFilled={this.boardIsFilled}\r\n        reset={this.reset} />\r\n    );\r\n    return this.state.gameOver ? announcement : '';\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <Fragment>\r\n        <AppBar />\r\n        {this.renderAnnouncement()}\r\n        <Title />\r\n        <div className=\"grid\">{this.renderGrid()}</div>\r\n      </Fragment>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\ndocument.title = 'React - Tic Tac Toe';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = __webpack_public_path__ + \"static/media/github.84856d11.svg\";"],"sourceRoot":""}